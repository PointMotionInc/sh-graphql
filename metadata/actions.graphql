type Mutation {
  appAccessed: AppAccessed
}

type Mutation {
  faqAccessed: FaqAccessed
}

type Mutation {
  freeParkinsonResourcesAccessed: FreeParkinsonResourcesAccessed
}

type Mutation {
  freeRewardAccessed: FreeRewardAccessed
}

type Query {
  gameAchievementRatio(
    gameId: ID!
  ): GameAchievementRatio
}

type Mutation {
  gameCompleted(
    startDate: String!
    currentDate: String!
    endDate: String!
    userTimezone: String!
  ): GameCompleted
}

type Query {
  generateSpeech(
    text: String!
  ): GenerateSpeech
}

type Mutation {
  isTutorialNeeded(
    game: String!
  ): Output
}

type Mutation {
  markRewardAsAccessed(
    rewardTier: String!
  ): MarkRewardAsAccessed
}

type Mutation {
  markRewardAsViewed(
    rewardTier: String!
  ): MarkRewardAsViewed
}

type Query {
  patientChart(
    startDate: String!
    endDate: String!
    userTimezone: String!
    patientId: ID
    chartType: ChartTypeEnum!
    groupBy: GroupByEnum!
    isGroupByGames: Boolean
  ): PatientChart
}

type Query {
  patientEngagementChart(
    startDate: String!
    endDate: String!
    userTimezone: String!
    patientId: String!
  ): PatientEngagementChart
}

type Query {
  patientMonthlyCompletion(
    startDate: String!
    endDate: String!
    userTimezone: String!
    sortBy: SortByEnum!
    sortDirection: SortDirectionEnum!
    limit: String!
    offset: String!
    showInactive: Boolean!
  ): PatientMonthlyCompletion
}

type Query {
  patientMonthlyGoals(
    startDate: String!
    endDate: String!
    userTimezone: String!
  ): PatientMonthlyGoals
}

type Query {
  patientSessionStreak(
    userTimezone: String!
  ): PatientSessionStreak
}

type Mutation {
  requestLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
  ): RequestLoginOtp
}

type Mutation {
  resendLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
  ): ResendLoginOtp
}

type Mutation {
  updateRewards(
    startDate: String!
    endDate: String!
    userTimezone: String!
  ): UpdateRewards
}

type Mutation {
  verifyLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
    otp: Int!
  ): VerifyLoginOtp
}

enum Status {
  completed
  partiallycompleted
  exceeded
}

enum ChartTypeEnum {
  avgAchievementRatio
  avgCompletionTime
  avgEngagementRatio
  patientsCompletionHeatmap
}

enum GroupByEnum {
  day
  week
  month
}

enum SortByEnum {
  recentActivity
  overallActivity
}

enum SortDirectionEnum {
  asc
  desc
}

input SampleInput {
  username: String!
  password: String!
}

type Root {
  data: [Day]
}

type Day {
  day: Int!
  sessions: [Session]
}

type Session {
  id: ID!
  status: Status!
}

type PatientMonthlyGoals {
  status: String!
  data: PatientMonthlyGoalsData
}

type PatientDailyGoals {
  status: String!
  data: PatientDailyGoalsData
}

type PatientSessionStreak {
  streak: Int!
}

type Date {
  date: String!
  totalSessionDurationInMin: Int!
}

type EventNewPatient {
  message: String!
}

type EventNewTherapist {
  message: String!
}

type SignUpPatient {
  token: String!
  patient: Patient!
}

type Patient {
  id: String!
  provider: String!
  activeCareplan: String!
  nickname: String
}

type ExchangeCodeWithTokens {
  status: String!
  data: Tokens
}

type Tokens {
  id_token: String!
  access_token: String!
  refresh_token: String!
  expires_in: Int!
  token_type: String!
}

type RefreshTokens {
  status: String!
  data: RefreshedTokens
}

type RefreshedTokens {
  AccessToken: String!
  ExpiresIn: Int!
  IdToken: String!
  TokenType: String!
}

type RevokeRefreshToken {
  status: String!
}

type GenerateSpeech {
  speech: String!
}

type PatientMonthlyGoalsData {
  daysCompleted: Int!
  rewardsCountDown: [Int!]!
}

type PatientDailyGoalsData {
  activities: [PatientDailyGoalsDataActivities]!
}

type PatientDailyGoalsDataActivities {
  id: String!
  isCompleted: Boolean!
}

type UpdateRewards {
  status: String!
}

type MarkRewardAsViewed {
  status: String!
}

type FaqAccessed {
  status: String!
}

type FreeParkinsonResourcesAccessed {
  status: String!
}

type MarkRewardAsAccessed {
  status: String!
}

type FreeRewardAccessed {
  status: String!
}

type Output {
  isTutorialNeeded: Boolean!
}

type GameCompleted {
  status: String!
}

type AppAccessed {
  status: String!
}

type TestMutation {
  status: String!
  data: TestData
}

type TestData {
  name: String!
}

type RequestLoginOtp {
  data: RequestLoginOtpData
}

type RequestLoginOtpData {
  message: String
}

type VerifyLoginOtp {
  data: VerifyLoginOtpData
}

type VerifyLoginOtpData {
  token: String!
}

type ResendLoginOtp {
  data: ResendLoginOtpData
}

type ResendLoginOtpData {
  message: String
}

type SampleOutput {
  accessToken: String!
}

type PatientEngagementChart {
  data: PatientEngagementChartData!
}

type PatientEngagementChartData {
  labels: [String]!
  engagementPercentage: [Float]!
}

type PatientChart {
  data: String!
}

type GameAchievementRatio {
  data: GameAchievementRatioData!
}

type GameAchievementRatioData {
  labels: [String!]!
  data: [Int!]!
}

type PatientMonthlyCompletion {
  data: String!
}

