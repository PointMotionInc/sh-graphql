type Mutation {
  addPaymentMethod(
    cardDetails: CardDetailsDTO
  ): AddPaymentMethodResp!
}

type Mutation {
  appAccessed: AppAccessed
}

type Mutation {
  cancelSubscription: Subscription!
}

type Mutation {
  createCustomer: CreateCustomer!
}

type Mutation {
  createErpNextIssue(
    subject: String!
    description: String!
    email: String!
  ): CreateErpNextIssue
}

type Mutation {
  createPatient(
    inviteCode: String!
    namePrefix: String!
    firstName: String!
    lastName: String!
    email: String!
    phoneCountryCode: String!
    phoneNumber: String!
  ): CreatePatient
}

type Mutation {
  createPaymentSetupIntent: SetupIntent!
}

type Mutation {
  createStaff(
    inviteCode: String!
    firstName: String!
    lastName: String!
    email: String!
    phoneCountryCode: String!
    phoneNumber: String!
  ): CreateStaff
}

type Mutation {
  createSubscription: SubscriptionId!
}

type Mutation {
  createSubscriptionPlan(
    subscriptionFee: Int!
    trialPeriod: Int!
  ): CreateSubscriptionPlan
}

type Mutation {
  createSubscriptionWithPromocode(
    promocode: String!
  ): SubscriptionId!
}

type Query {
  dashboardConversion(
    startDate: String!
    endDate: String!
    type: DashboardConversionMetricsEnum!
  ): DashboardMetrics
}

type Query {
  dashboardEngagement(
    startDate: String!
    endDate: String!
    type: DashboardEngagementMetricsEnum!
  ): DashboardMetrics
}

type Query {
  dashboardRetention(
    startDate: String!
    endDate: String!
    type: DashboardRetentionMetricsEnum!
  ): DashboardMetrics
}

type Mutation {
  faqAccessed: FaqAccessed
}

type Query {
  fetchUserRbac: FetchUserRbac
}

type Mutation {
  freeParkinsonResourcesAccessed: FreeParkinsonResourcesAccessed
}

type Mutation {
  freeRewardAccessed: FreeRewardAccessed
}

type Query {
  gameAchievementRatio(
    gameId: ID!
  ): GameAchievementRatio
}

type Mutation {
  gameCompleted(
    startDate: String!
    currentDate: String!
    endDate: String!
    userTimezone: String!
  ): GameCompleted
}

type Query {
  generateSpeech(
    text: String!
  ): GenerateSpeech
}

type Mutation {
  generateSubscriptionPlanReport: SubscriptionPlanReport
}

type Mutation {
  getBillingHistory(
    startingAfter: String!
    endingBefore: String!
    limit: Int!
  ): BillingHistoryData
}

type Query {
  getDefaultPaymentMethod: PaymentMethod!
}

type Query {
  getPaymentMethodDetails(
    paymentMethodId: String!
  ): PaymentMethod!
}

type Query {
  getSubscriptionDetails: Subscription!
}

type Query {
  getSubscriptionStatus: SubscriptionStatus!
}

type Mutation {
  inviteOrganizationViaEmail(
    redirectUrl: String!
    email: String!
    inviteCode: String!
  ): InviteOrganizationViaEmail
}

type Query {
  invitePatient(
    shouldSendEmail: Boolean
    email: String
    expiryAt: String
  ): InvitePatient
}

type Query {
  inviteStaff(
    staffType: StaffType!
    shouldSendEmail: Boolean
    email: String
    expiryAt: String
  ): InviteStaff
}

type Mutation {
  markRewardAsAccessed(
    rewardTier: String!
  ): MarkRewardAsAccessed
}

type Mutation {
  markRewardAsViewed(
    rewardTier: String!
  ): MarkRewardAsViewed
}

type Query {
  mockStaffJwt(
    userRole: StaffType!
  ): MockStaffJwt
}

type Query {
  patientAdherenceChart(
    startDate: String!
    endDate: String!
    groupBy: GroupByEnum!
  ): PatientAdherenceChart
}

type Query {
  patientChart(
    startDate: String!
    endDate: String!
    userTimezone: String!
    patientId: ID
    chartType: ChartTypeEnum!
    groupBy: GroupByEnum!
    isGroupByGames: Boolean
  ): PatientChart
}

type Query {
  patientEngagementChart(
    startDate: String!
    endDate: String!
    userTimezone: String!
    patientId: String!
  ): PatientEngagementChart
}

type Query {
  patientMonthlyCompletion(
    startDate: String!
    endDate: String!
    userTimezone: String!
    sortBy: SortByEnum!
    sortDirection: SortDirectionEnum!
    limit: String!
    offset: String!
    showInactive: Boolean!
  ): PatientMonthlyCompletion
}

type Query {
  patientMonthlyGoals(
    startDate: String!
    endDate: String!
    userTimezone: String!
  ): PatientMonthlyGoals
}

type Query {
  patientOverviewChart(
    startDate: String!
    endDate: String!
  ): PatientOverviewChart
}

type Query {
  patientSessionStreak(
    userTimezone: String!
  ): PatientSessionStreak
}

type Mutation {
  removePaymentMethod(
    paymentMethodId: String!
  ): Status
}

type Mutation {
  requestLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
    inviteCode: String
  ): RequestLoginOtp
}

type Mutation {
  resendLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
  ): ResendLoginOtp
}

type Mutation {
  setDefaultPaymentMethod(
    paymentMethodId: String!
  ): StripeCustomer!
}

type Mutation {
  tokenizePHI(
    event: String
    table: String
  ): TokenizePHIResp!
}

type Mutation {
  transcodeVideo(
    benchmarkConfigId: ID!
    type: transcodeVideoType!
  ): transcodeVideoOutput
}

type Mutation {
  updatePaymentMethod(
    cardDetails: UpdatePaymentMethodDTO!
    paymentMethodId: String!
  ): UpdatedPaymentMethod!
}

type Mutation {
  updateRewards(
    startDate: String!
    endDate: String!
    userTimezone: String!
  ): UpdateRewards
}

type Mutation {
  updateSubscriptionPlan(
    subscriptionFee: Int!
    trialPeriod: Int!
  ): UpdateSubscriptionPlan
}

type Mutation {
  uploadBenchmarkVideos(
    benchmarkConfigId: ID!
  ): UploadBenchmarkVideosOutput
}

type Mutation {
  uploadOrganizationLogo: UploadOrganizationLogo
}

type Query {
  uploadTestingVideoSts: UploadTestingVideoStsData
}

type Mutation {
  verifyLoginOtp(
    phoneCountryCode: String!
    phoneNumber: String!
    otp: Int!
  ): VerifyLoginOtp
}

type Query {
  viewTesterRecording(
    recordingId: String!
  ): ViewTesterRecording
}

enum ChartTypeEnum {
  avgAchievementRatio
  avgCompletionTime
  avgEngagementRatio
  patientsCompletionHeatmap
}

enum GroupByEnum {
  day
  week
  month
}

enum SortByEnum {
  recentActivity
  overallActivity
}

enum SortDirectionEnum {
  asc
  desc
}

enum transcodeVideoType {
  webcam
  screenCapture
}

enum UserRole {
  therapist
  org_admin
}

enum OrgType {
  clinic
  hospital
  provider
}

enum StaffType {
  org_admin
  therapist
  sh_admin
}

enum DashboardConversionMetricsEnum {
  new_users
  activation_milestone
  activation_rate
}

enum DashboardEngagementMetricsEnum {
  avg_user_engagement
  avg_activities_played
  adoption_rate
}

enum DashboardRetentionMetricsEnum {
  active_users
  total_users
  stickiness
}

input SampleInput {
  username: String!
  password: String!
}

input CreateOrganizationInput {
  inviteCode: String!
  adminDetails: AdminDetails!
  orgDetails: OrgDetails!
}

input AdminDetails {
  phoneCountryCode: String!
  phoneNumber: String!
  email: String!
}

input OrgDetails {
  name: String!
  type: OrgType!
}

input CardDetailsDTO {
  exp_month: Int!
  exp_year: Int!
  number: String!
}

input UpdateCardDetailsDTO {
  exp_month: Int!
  exp_year: Int!
}

input UpdatePaymentMethodDTO {
  exp_month: Int!
  exp_year: Int!
}

type Root {
  data: [Day]
}

type Day {
  day: Int!
  sessions: [Session]
}

type Session {
  id: ID!
  status: Status!
}

type PatientMonthlyGoals {
  status: String!
  data: PatientMonthlyGoalsData
}

type PatientDailyGoals {
  status: String!
  data: PatientDailyGoalsData
}

type PatientSessionStreak {
  streak: Int!
}

type Date {
  date: String!
  totalSessionDurationInMin: Int!
}

type EventNewPatient {
  message: String!
}

type EventNewTherapist {
  message: String!
}

type SignUpPatient {
  token: String!
  patient: Patient!
}

type Patient {
  id: String!
  provider: String!
  activeCareplan: String!
  nickname: String
}

type ExchangeCodeWithTokens {
  status: String!
  data: Tokens
}

type Tokens {
  id_token: String!
  access_token: String!
  refresh_token: String!
  expires_in: Int!
  token_type: String!
}

type RefreshTokens {
  status: String!
  data: RefreshedTokens
}

type RefreshedTokens {
  AccessToken: String!
  ExpiresIn: Int!
  IdToken: String!
  TokenType: String!
}

type RevokeRefreshToken {
  status: String!
}

type GenerateSpeech {
  speech: String!
}

type PatientMonthlyGoalsData {
  daysCompleted: Int!
  rewardsCountDown: [Int!]!
}

type PatientDailyGoalsData {
  activities: [PatientDailyGoalsDataActivities]!
}

type PatientDailyGoalsDataActivities {
  id: String!
  isCompleted: Boolean!
}

type UpdateRewards {
  status: String!
}

type MarkRewardAsViewed {
  status: String!
}

type FaqAccessed {
  status: String!
}

type FreeParkinsonResourcesAccessed {
  status: String!
}

type MarkRewardAsAccessed {
  status: String!
}

type FreeRewardAccessed {
  status: String!
}

type Output {
  isTutorialNeeded: Boolean!
}

type GameCompleted {
  status: String!
}

type AppAccessed {
  status: String!
}

type TestMutation {
  status: String!
  data: TestData
}

type TestData {
  name: String!
}

type RequestLoginOtp {
  data: RequestLoginOtpData
}

type RequestLoginOtpData {
  message: String
  isExistingUser: Boolean
}

type VerifyLoginOtp {
  data: VerifyLoginOtpData
}

type VerifyLoginOtpData {
  token: String!
}

type ResendLoginOtp {
  data: ResendLoginOtpData
}

type ResendLoginOtpData {
  message: String
  isExistingUser: Boolean
}

type SampleOutput {
  accessToken: String!
}

type PatientEngagementChart {
  data: PatientEngagementChartData!
}

type PatientEngagementChartData {
  labels: [String]!
  engagementPercentage: [Float]!
}

type PatientChart {
  data: String!
}

type GameAchievementRatio {
  data: GameAchievementRatioData!
}

type GameAchievementRatioData {
  labels: [String!]!
  data: [Int!]!
}

type PatientMonthlyCompletion {
  data: String!
}

type UploadBenchmarkVideosOutput {
  data: UploadBenchmarkVideosOutputData!
}

type UploadBenchmarkVideosOutputData {
  webcamUploadUrl: String
  screenCaptureUploadUrl: String
}

type transcodeVideoOutput {
  data: transcodeVideoOutputData
}

type transcodeVideoOutputData {
  status: String!
}

type PatientAdherenceChart {
  data: PatientAdherenceChartData!
}

type PatientAdherenceChartOutput {
  activePatientsCount: Int!
  totalNumOfPatients: Int!
}

type PatientOverviewChart {
  data: [PatientOverviewChartData!]!
}

type PatientOverviewChartData {
  patient: String!
  nickname: String!
  gamesPlayedCount: Int!
  engagementRatio: Int!
  avgAchievementPercentage: Int!
}

type PatientAdherenceChartData {
  activePatientsCount: Int!
  totalNumOfPatients: Int!
}

type GenerateOrganiationInviteCode {
  data: GenerateOrganiationInviteCodeData!
}

type GenerateOrganiationInviteCodeData {
  inviteCode: String!
}

type GenerateOrganizationInviteCode {
  data: GenerateOrganiationInviteCodeData!
}

type GenerateOrganizationInviteCodeData {
  inviteCode: String!
}

type InviteOrganizationViaEmail {
  data: InviteOrganizationViaEmailData!
}

type InviteOrganizationViaEmailData {
  message: String!
}

type CreateOrganization {
  data: CreateOrganizationData!
}

type CreateOrganizationData {
  message: String!
}

type CreatePatient {
  data: CreatePatientData!
}

type CreatePatientDatq {
  message: String!
}

type CreateStaff {
  data: CreatePatientData!
}

type CreatePatientData {
  message: String!
}

type InvitePatient {
  data: InvitePatientData!
}

type InvitePatientData {
  inviteCode: String!
}

type InviteStaff {
  data: InviteStaffData!
}

type InviteStaffData {
  inviteCode: String!
}

type UploadOrganizationLogo {
  data: UploadOrganizationLogoData!
}

type UploadOrganizationLogoData {
  uploadUrl: String!
  logoAccessUrl: String!
}

type FetchUserRbac {
  data: String!
}

type CreateSubscriptionPlan {
  data: CreateSubscriptionPlanData!
}

type CreateSubscriptionPlanData {
  subscriptionPlanId: String!
}

type UpdateSubscriptionPlan {
  data: UpdateSubscriptionPlanData!
}

type UpdateSubscriptionPlanData {
  subscriptionPlanId: String!
}

type CreateCustomer {
  customerId: String!
}

type AddPaymentMethodResp {
  paymentMethod: String!
}

type PaymentMethodId {
  paymentMethodId: String!
}

type Status {
  status: String!
}

type PaymentMethod {
  data: String!
}

type UpdatedPaymentMethod {
  data: String!
}

type SubscriptionId {
  subscription: String!
}

type Subscription {
  subscription: String!
}

type SetupIntent {
  clientSecret: String!
}

type MockStaffJwt {
  data: MockStaffJwtData!
}

type MockStaffJwtData {
  jwt: String!
}

type StripeCustomer {
  data: String!
}

type BillingHistory {
  paymentDate: Int!
  subscriptionPeriod: SubscriptionPeriod
  cardDetails: CardDetails
  amountPaid: Int!
  url: String
}

type SubscriptionPeriod {
  start: Int!
  end: Int!
}

type CardDetails {
  last4: Int
  brand: String
}

type BillingHistoryData {
  invoices: [Invoice]
  hasMore: Boolean!
}

type Invoice {
  paymentDate: Int!
  subscriptionPeriod: SubscriptionPeriod
  cardDetails: CardDetails
  amountPaid: Int!
  url: String
}

type SubscriptionStatus {
  data: String!
}

type SubscriptionPlanReport {
  report: String
}

type ReportStatus {
  result: String!
}

type CreateErpNextIssue {
  data: String!
}

type UploadTestingVideoUrlData {
  data: UploadTestingVideoUrl!
}

type UploadTestingVideoUrl {
  credentials: UploadTestingVideoUrlStsCredentials!
}

type UploadTestingVideoUrlStsCredentials {
  AccessKeyId: String!
  SecretAccessKey: String!
  SessionToken: String!
  Expiration: String!
}

type UploadTestingVideoStsData {
  data: UploadTestingVideoSts!
}

type UploadTestingVideoSts {
  credentials: UploadTestingVideoStsCreds!
  folder: String!
  bucket: String!
}

type UploadTestingVideoStsCreds {
  AccessKeyId: String!
  SecretAccessKey: String!
  SessionToken: String!
  Expiration: String!
}

type DashboardConversionNewUsers {
  data: DashboardConversionNewUsersData!
}

type DashboardConversionNewUsersData {
  showPercentageChange: Boolean!
  newUsersCount: Int!
  percentageChange: Float
}

type DashboardMetrics {
  data: DashboardMetricsData!
}

type DashboardMetricsData {
  showPercentageChange: Boolean!
  newCount: Int!
  percentageChange: Float
  metric: String!
}

type ViewTesterRecording {
  data: ViewTesterRecordingData!
}

type ViewTesterRecordingData {
  configUrl: String!
  videoUrl: String!
}

type WritePHIResp {
  status: String!
}

type TokenizePHIResp {
  status: String!
}

